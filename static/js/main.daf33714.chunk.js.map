{"version":3,"sources":["ItemName.js","Button.js","ListItem.js","List.js","InputForm.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["ItemName","props","isEditing","type","value","children","onChange","handleNameEdits","onClick","toggleIsEditingAt","Button","className","handleRemove","ListItem","item","e","setName","target","List","list","map","index","key","name","removeItemAt","id","text","setNameAt","InputForm","onSubmit","newItemSubmitHandler","handleItemInput","pendingItem","placeholder","Header","App","state","lastItemId","newItemId","console","log","setState","filter","preventDefault","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.daf33714.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ItemName = props => {\r\n    if (props.isEditing) {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                value={props.children}\r\n                onChange={props.handleNameEdits}\r\n            />\r\n        );\r\n    }\r\n    return <span onClick={props.toggleIsEditingAt}>{props.children}</span>;\r\n};\r\n\r\nItemName.propTypes = {\r\n    item: PropTypes.string.isRequired,\r\n    handleNameEdits: PropTypes.func.isRequired,\r\n    toggleIsEditingAt: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ItemName;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = props => {\r\n    if (props.isEditing) {\r\n        return (\r\n            <button className=\"action\" onClick={props.toggleIsEditingAt}>\r\n                save\r\n            </button>\r\n        );\r\n    }\r\n    return (\r\n        <button className=\"action\" onClick={props.handleRemove}>\r\n            x\r\n        </button>\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    handleRemove: PropTypes.func.isRequired,\r\n    toggleIsEditingAt: PropTypes.func.isRequired,\r\n    isEditing: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Import Compon\r\nimport ItemName from \"./ItemName\";\r\nimport Button from \"./Button\";\r\n\r\nconst ListItem = props => {\r\n    return (\r\n        <li>\r\n            <ItemName\r\n                isEditing={props.isEditing}\r\n                item={props.item}\r\n                toggleIsEditingAt={props.toggleIsEditingAt}\r\n                handleNameEdits={e => props.setName(e.target.value)}\r\n            >\r\n                {props.item}\r\n            </ItemName>\r\n            <Button\r\n                isEditing={props.isEditing}\r\n                toggleIsEditingAt={props.toggleIsEditingAt}\r\n                handleRemove={props.handleRemove}\r\n            />\r\n        </li>\r\n    );\r\n};\r\n\r\nListItem.propTypes = {\r\n    item: PropTypes.string.isRequired,\r\n    handleRemove: PropTypes.func.isRequired,\r\n    toggleIsEditingAt: PropTypes.func.isRequired,\r\n    isEditing: PropTypes.bool.isRequired,\r\n    setName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Import Compon\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst List = props => {\r\n    return (\r\n        <ul>\r\n            {props.list.map((item, index) => (\r\n                <ListItem\r\n                    key={index}\r\n                    item={item.name}\r\n                    isEditing={item.isEditing}\r\n                    handleRemove={() => props.removeItemAt(item.id)}\r\n                    toggleIsEditingAt={() => props.toggleIsEditingAt(item.id)}\r\n                    setName={text => props.setNameAt(text, item.id)}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nList.propTypes = {\r\n    list: PropTypes.array.isRequired,\r\n    removeItemAt: PropTypes.func.isRequired,\r\n    toggleIsEditingAt: PropTypes.func.isRequired,\r\n    setNameAt: PropTypes.func.isRequired\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst InputForm = props => {\r\n    return (\r\n        <form onSubmit={props.newItemSubmitHandler} className=\"todoInput\">\r\n            <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                onChange={props.handleItemInput}\r\n                value={props.pendingItem}\r\n                placeholder=\"Add an item\"\r\n            />\r\n            <button type=\"submit\" name=\"submit\" value=\"submit\">\r\n                add\r\n      </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nInputForm.propTypes = {\r\n    newItemSubmitHandler: PropTypes.func.isRequired,\r\n    handleItemInput: PropTypes.func.isRequired,\r\n    pendingItem: PropTypes.string.isRequired\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"title\">todo list with crud operations</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\n\n// Import components\nimport List from \"./List\";\nimport InputForm from \"./InputForm\";\nimport Header from \"./Header\";\n\nclass App extends Component {\n  // getInitialState\n  state = {\n    list: [],\n    pendingItem: \"\"\n  };\n\n  lastItemId = 0;\n\n  newItemId = () => {\n    const id = this.lastItemId;\n    this.lastItemId += 1;\n    return id;\n  };\n\n  // Flips isEditing bool\n  toggleIsEditingAt = id => {\n    console.log(\"isEditingAt\", id);\n    this.setState({\n      list: this.state.list.map(item => {\n        if (id === item.id) {\n          return {\n            ...item,\n            isEditing: !item[\"isEditing\"]\n          };\n        }\n        return item;\n      })\n    });\n  };\n\n  removeItemAt = id => {\n    this.setState({ list: this.state.list.filter(item => id !== item.id) });\n  };\n\n  handleItemInput = e => this.setState({ pendingItem: e.target.value });\n\n  // handle editing items\n  setNameAt = (name, id) => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (id === item.id) {\n          return {\n            ...item,\n            name\n          };\n        }\n        return item;\n      })\n    });\n  };\n\n  newItemSubmitHandler = e => {\n    e.preventDefault();\n    const id = this.newItemId();\n    this.setState({\n      list: [\n        {\n          name: this.state.pendingItem,\n          isEditing: false,\n          id\n        },\n        ...this.state.list\n      ],\n      pendingItem: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Header />\n        <InputForm\n          newItemSubmitHandler={this.newItemSubmitHandler}\n          handleItemInput={this.handleItemInput}\n          pendingItem={this.state.pendingItem}\n        />\n\n        <List\n          list={this.state.list}\n          removeItemAt={this.removeItemAt}\n          toggleIsEditingAt={this.toggleIsEditingAt}\n          setNameAt={this.setNameAt}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}